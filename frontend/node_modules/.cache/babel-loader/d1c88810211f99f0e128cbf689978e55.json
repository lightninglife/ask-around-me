{"remainingRequest":"/Users/paulzhao/ask-around-me/ask-around-me/frontend/node_modules/babel-loader/lib/index.js!/Users/paulzhao/ask-around-me/ask-around-me/frontend/node_modules/vuetify-loader/lib/loader.js??ref--18-0!/Users/paulzhao/ask-around-me/ask-around-me/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/paulzhao/ask-around-me/ask-around-me/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paulzhao/ask-around-me/ask-around-me/frontend/src/components/IoT.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/paulzhao/ask-around-me/ask-around-me/frontend/src/components/IoT.vue","mtime":1594664018278},{"path":"/Users/paulzhao/ask-around-me/ask-around-me/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/paulzhao/ask-around-me/ask-around-me/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/paulzhao/ask-around-me/ask-around-me/frontend/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/paulzhao/ask-around-me/ask-around-me/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/paulzhao/ask-around-me/ask-around-me/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmciOwppbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICIvVXNlcnMvcGF1bHpoYW8vYXNrLWFyb3VuZC1tZS9hc2stYXJvdW5kLW1lL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyIjsKLy8KLy8KLy8KLy8KaW1wb3J0IHsgbWFwU3RhdGUgfSBmcm9tICd2dWV4JzsKdmFyIG1xdHRDbGllbnQ7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnSW9UJywKICBjb21wdXRlZDogX29iamVjdFNwcmVhZCh7fSwgbWFwU3RhdGUoewogICAgaW5pdDogZnVuY3Rpb24gaW5pdChzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuaW5pdGlhbGl6ZWQ7CiAgICB9LAogICAgaGFzaDogZnVuY3Rpb24gaGFzaChzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuaGFzaEtleTsKICAgIH0KICB9KSksCiAgd2F0Y2g6IHsKICAgIC8vIFRoZSBlZmZlY3Qgb2YgdGhpcyBpcyB0byB3YWl0IHVudGlsIHRoZSB1c2VyIGlzIGxvZ2dlZAogICAgLy8gaW4gYmVmb3JlIG1ha2luZyB0aGUgd2Vic29ja2V0IGNvbm5lY3Rpb24uCiAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkgewogICAgICBpZiAodGhpcy5pbml0KSB7CiAgICAgICAgdGhpcy5tb3VudElPVCgpOwogICAgICAgIGNvbnNvbGUubG9nKCdNb3VudGluZyB3ZWJzb2NrZXQnKTsKICAgICAgfQogICAgfSwKICAgIGhhc2g6IGZ1bmN0aW9uIGhhc2goKSB7CiAgICAgIGNvbnNvbGUubG9nKCdJb1Qgc3Vic2NyaWJpbmcgdG8gJywgdGhpcy5oYXNoKTsKICAgICAgdGhpcy5zdWJzY3JpYmUodGhpcy5oYXNoKTsKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKHRvcGljKSB7CiAgICAgIGNvbnNvbGUubG9nKCdJb1Qgc3ViY3JpYmluZyB0byAnLCB0b3BpYyk7CiAgICAgIG1xdHRDbGllbnQuc3Vic2NyaWJlKHRvcGljKTsKICAgIH0sCiAgICBtb3VudElPVDogZnVuY3Rpb24gbW91bnRJT1QoKSB7CiAgICAgIHZhciBfc3RvcmUgPSB0aGlzLiRzdG9yZTsKCiAgICAgIHZhciBBV1MgPSByZXF1aXJlKCdhd3Mtc2RrJyk7CgogICAgICB2YXIgQVdTSW9URGF0YSA9IHJlcXVpcmUoJ2F3cy1pb3QtZGV2aWNlLXNkaycpOwoKICAgICAgdmFyIGVycm9yQ291bnQgPSAwOwogICAgICB2YXIgQVdTQ29uZmlndXJhdGlvbiA9IHsKICAgICAgICBwb29sSWQ6IHRoaXMuJHBvb2xJZCwKICAgICAgICAvLyd1cy1lYXN0LTE6ZTQ4MDNkM2ItNDJkNS00OTZmLTljNWEtNDA4ZjIwZWIyOGU0JywgLy8gJ1lvdXJDb2duaXRvSWRlbnRpdHlQb29sSWQnCiAgICAgICAgaG9zdDogdGhpcy4kaG9zdCwKICAgICAgICAvLyAnWW91ckF3c0lvVEVuZHBvaW50JywgZS5nLiAncHJlZml4LmlvdC51cy1lYXN0LTEuYW1hem9uYXdzLmNvbScKICAgICAgICByZWdpb246IHRoaXMuJHJlZ2lvbiAvLyAnWW91ckF3c1JlZ2lvbicsIGUuZy4gJ3VzLWVhc3QtMScKCiAgICAgIH07CiAgICAgIHZhciBjdXJyZW50bHlTdWJzY3JpYmVkVG9waWMgPSAnbmV3LWFuc3dlcic7CiAgICAgIHZhciBjbGllbnRJZCA9ICdhc2tBcm91bmRNZS0nICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAwICsgMSk7CiAgICAgIEFXUy5jb25maWcucmVnaW9uID0gQVdTQ29uZmlndXJhdGlvbi5yZWdpb247CiAgICAgIEFXUy5jb25maWcuY3JlZGVudGlhbHMgPSBuZXcgQVdTLkNvZ25pdG9JZGVudGl0eUNyZWRlbnRpYWxzKHsKICAgICAgICBJZGVudGl0eVBvb2xJZDogQVdTQ29uZmlndXJhdGlvbi5wb29sSWQKICAgICAgfSk7CiAgICAgIGNvbnNvbGUubG9nKCdJb1QgY3JlYXRlZCcpOwogICAgICBtcXR0Q2xpZW50ID0gQVdTSW9URGF0YS5kZXZpY2UoewogICAgICAgIHJlZ2lvbjogQVdTLmNvbmZpZy5yZWdpb24sCiAgICAgICAgaG9zdDogQVdTQ29uZmlndXJhdGlvbi5ob3N0LAogICAgICAgIGNsaWVudElkOiBjbGllbnRJZCwKICAgICAgICBwcm90b2NvbDogJ3dzcycsCiAgICAgICAgbWF4aW11bVJlY29ubmVjdFRpbWVNczogODAwMCwKICAgICAgICBkZWJ1ZzogZmFsc2UsCiAgICAgICAgYWNjZXNzS2V5SWQ6ICcnLAogICAgICAgIHNlY3JldEtleTogJycsCiAgICAgICAgc2Vzc2lvblRva2VuOiAnJwogICAgICB9KTsKICAgICAgdmFyIGNvZ25pdG9JZGVudGl0eSA9IG5ldyBBV1MuQ29nbml0b0lkZW50aXR5KCk7CgogICAgICB2YXIgZ2V0Q3JlZHMgPSBmdW5jdGlvbiBnZXRDcmVkcygpIHsKICAgICAgICBBV1MuY29uZmlnLmNyZWRlbnRpYWxzLmdldChmdW5jdGlvbiAoZXJyLCBkYXRhKSB7CiAgICAgICAgICBpZiAoIWVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygncmV0cmlldmVkIGlkZW50aXR5OiAnICsgQVdTLmNvbmZpZy5jcmVkZW50aWFscy5pZGVudGl0eUlkLCBkYXRhKTsKICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHsKICAgICAgICAgICAgICBJZGVudGl0eUlkOiBBV1MuY29uZmlnLmNyZWRlbnRpYWxzLmlkZW50aXR5SWQKICAgICAgICAgICAgfTsKICAgICAgICAgICAgY29nbml0b0lkZW50aXR5LmdldENyZWRlbnRpYWxzRm9ySWRlbnRpdHkocGFyYW1zLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7CiAgICAgICAgICAgICAgaWYgKCFlcnIpIHsKICAgICAgICAgICAgICAgIG1xdHRDbGllbnQudXBkYXRlV2ViU29ja2V0Q3JlZGVudGlhbHMoZGF0YS5DcmVkZW50aWFscy5BY2Nlc3NLZXlJZCwgZGF0YS5DcmVkZW50aWFscy5TZWNyZXRLZXksIGRhdGEuQ3JlZGVudGlhbHMuU2Vzc2lvblRva2VuKTsKICAgICAgICAgICAgICB9IGVsc2Ugey8vIGNvbnNvbGUubG9nKCdlcnJvciByZXRyaWV2aW5nIGNyZWRlbnRpYWxzOiAnICsgZXJyKQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2Ugey8vIGNvbnNvbGUubG9nKCdlcnJvciByZXRyaWV2aW5nIGlkZW50aXR5OicgKyBlcnIpCiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH07CgogICAgICBtcXR0Q2xpZW50Lm9uKCdjb25uZWN0JywgZnVuY3Rpb24gKCkgewogICAgICAgIGNvbnNvbGUubG9nKCdtcXR0Q2xpZW50IGNvbm5lY3RlZCcpOwogICAgICAgIG1xdHRDbGllbnQuc3Vic2NyaWJlKGN1cnJlbnRseVN1YnNjcmliZWRUb3BpYyk7CiAgICAgIH0pOwogICAgICBtcXR0Q2xpZW50Lm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICBpZiAoZXJyb3JDb3VudCA+IDApIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdtcXR0Q2xpZW50IGVycm9yOicsIGVycik7CiAgICAgICAgfQoKICAgICAgICBlcnJvckNvdW50Kys7CiAgICAgICAgZ2V0Q3JlZHMoKTsKICAgICAgfSk7CiAgICAgIG1xdHRDbGllbnQub24oJ21lc3NhZ2UnLCBmdW5jdGlvbiAodG9waWMsIHBheWxvYWQpIHsKICAgICAgICB2YXIgbXNnID0gSlNPTi5wYXJzZShwYXlsb2FkLnRvU3RyaW5nKCkpOwogICAgICAgIGNvbnNvbGUubG9nKCdJb1QgbXNnOiAnLCB0b3BpYywgbXNnKTsKCiAgICAgICAgaWYgKHRvcGljID09PSAnbmV3LWFuc3dlcicpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCd1cGRhdGUnKTsKCiAgICAgICAgICBfc3RvcmUuY29tbWl0KCd1cGRhdGVRdWVzdGlvbicsIG1zZyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdOZXcgcXVlc3Rpb24nKTsKCiAgICAgICAgICBfc3RvcmUuY29tbWl0KCdzYXZlUXVlc3Rpb24nLCBtc2cpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["IoT.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div></div>\n</template>\n\n<script>\n  import { mapState } from 'vuex'\n  let mqttClient\n\n  export default {\n    name: 'IoT',\n    computed: {\n      ...mapState({\n        init: (state) => state.initialized,\n        hash: (state) => state.hashKey\n      })\n    },\n    watch: {\n      // The effect of this is to wait until the user is logged\n      // in before making the websocket connection.\n      init: function () {\n        if (this.init) {\n          this.mountIOT()\n          console.log('Mounting websocket')\n        }\n      },\n      hash: function() {\n        console.log('IoT subscribing to ', this.hash)\n        this.subscribe(this.hash)\n      }\n    },\n    methods: {\n      subscribe (topic) {\n        console.log('IoT subcribing to ', topic)\n        mqttClient.subscribe(topic)\n      },\n      mountIOT () {\n        let _store = this.$store\n\n        const AWS = require('aws-sdk')\n        const AWSIoTData = require('aws-iot-device-sdk')\n        let errorCount = 0\n\n        const AWSConfiguration = {\n          poolId: this.$poolId, //'us-east-1:e4803d3b-42d5-496f-9c5a-408f20eb28e4', // 'YourCognitoIdentityPoolId'\n          host: this.$host, // 'YourAwsIoTEndpoint', e.g. 'prefix.iot.us-east-1.amazonaws.com'\n          region: this.$region // 'YourAwsRegion', e.g. 'us-east-1'\n        }\n\n        var currentlySubscribedTopic = 'new-answer'\n        var clientId = 'askAroundMe-' + (Math.floor((Math.random() * 100000) + 1))\n        AWS.config.region = AWSConfiguration.region\n\n        AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n          IdentityPoolId: AWSConfiguration.poolId\n        })\n\n        console.log('IoT created')\n        mqttClient = AWSIoTData.device({\n          region: AWS.config.region,\n          host: AWSConfiguration.host,\n          clientId: clientId,\n          protocol: 'wss',\n          maximumReconnectTimeMs: 8000,\n          debug: false,\n          accessKeyId: '',\n          secretKey: '',\n          sessionToken: ''\n        })\n\n        const cognitoIdentity = new AWS.CognitoIdentity()\n        const getCreds = function () {\n          AWS.config.credentials.get(function (err, data) {\n            if (!err) {\n              console.log('retrieved identity: ' + AWS.config.credentials.identityId, data)\n              const params = {\n                IdentityId: AWS.config.credentials.identityId\n              }\n              cognitoIdentity.getCredentialsForIdentity(params, function (err, data) {\n                if (!err) {\n                  mqttClient.updateWebSocketCredentials(data.Credentials.AccessKeyId,\n                    data.Credentials.SecretKey,\n                    data.Credentials.SessionToken)\n                } else {\n                  // console.log('error retrieving credentials: ' + err)\n                }\n              })\n            } else {\n              // console.log('error retrieving identity:' + err)\n            }\n          })\n        }\n\n        mqttClient.on('connect', function () {\n          console.log('mqttClient connected')\n          mqttClient.subscribe(currentlySubscribedTopic)\n        })\n\n        mqttClient.on('error', function (err) {\n          if (errorCount > 0) {\n            console.log('mqttClient error:', err)\n          }\n          errorCount++\n          getCreds()\n        })\n\n        mqttClient.on('message', function (topic, payload) {\n          const msg = JSON.parse(payload.toString())\n          console.log('IoT msg: ', topic, msg)\n          if (topic === 'new-answer') {\n            console.log('update')\n            _store.commit('updateQuestion', msg)\n          } else {\n            console.log('New question')\n            _store.commit('saveQuestion', msg)\n          }\n        })\n      }\n    }\n  }\n</script>"],"sourceRoot":"src/components"}]}