{"remainingRequest":"/Users/paulzhao/ask-around-me/ask-around-me/frontend/node_modules/thread-loader/dist/cjs.js!/Users/paulzhao/ask-around-me/ask-around-me/frontend/node_modules/babel-loader/lib/index.js!/Users/paulzhao/ask-around-me/ask-around-me/frontend/node_modules/vuetify-loader/lib/loader.js??ref--18-0!/Users/paulzhao/ask-around-me/ask-around-me/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/paulzhao/ask-around-me/ask-around-me/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paulzhao/ask-around-me/ask-around-me/frontend/src/views/Answers.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/paulzhao/ask-around-me/ask-around-me/frontend/src/views/Answers.vue","mtime":1594664018280},{"path":"/Users/paulzhao/ask-around-me/ask-around-me/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/paulzhao/ask-around-me/ask-around-me/frontend/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/paulzhao/ask-around-me/ask-around-me/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/paulzhao/ask-around-me/ask-around-me/frontend/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/paulzhao/ask-around-me/ask-around-me/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/paulzhao/ask-around-me/ask-around-me/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL3BhdWx6aGFvL2Fzay1hcm91bmQtbWUvYXNrLWFyb3VuZC1tZS9mcm9udGVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7Cgp2YXIgZ2VvaGFzaCA9IHJlcXVpcmUoJ25nZW9oYXNoJyk7Cgp2YXIgaWdub3JlID0gWydhbnN3ZXJzJywgJ3RvdGFsU2NvcmUnLCAnZ2VvaGFzaCcsICdxdWVzdGlvbicsICdnZW9Kc29uJywgJ2hhc2hLZXknLCAnY3JlYXRlZCcsICdyYW5nZUtleScsICd0eXBlJywgJ3N0YXRlJywgJ2F1dGhvciddOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIkFuc3dlcnMiLAogIGNvbXBvbmVudHM6IHt9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBjdXJyZW50TGF0OiA0MC43MzU4MjM1LAogICAgICBwYXJlbnRIZWlnaHQ6IDYwMCwKICAgICAgY3VycmVudExuZzogLTczLjk5MjcxMDIsCiAgICAgIGxvYWRpbmc6IHRydWUsCiAgICAgIGhrOiBudWxsLAogICAgICByazogbnVsbCwKICAgICAgYmxvY2tzOiBbXQogICAgfTsKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjb25zb2xlLmxvZygnbW91bnRlZCcpOwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKF90aGlzLiRyb3V0ZS5xdWVyeSk7CiAgICAgICAgICAgICAgX3RoaXMuaGsgPSBfdGhpcy4kcm91dGUucXVlcnkuaGs7CiAgICAgICAgICAgICAgX3RoaXMucmsgPSBfdGhpcy4kcm91dGUucXVlcnkucms7CiAgICAgICAgICAgICAgX3RoaXMucGFyZW50SGVpZ2h0ID0gX3RoaXMuJHBhcmVudC4kZWwub2Zmc2V0SGVpZ2h0OwoKICAgICAgICAgICAgICBpZiAoIShfdGhpcy5oayAmJiBfdGhpcy5yaykpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODsKICAgICAgICAgICAgICByZXR1cm4gX3RoaXMubG9hZEFuc3dlcnMoKTsKCiAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZSk7CiAgICB9KSkoKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGxvYWRBbnN3ZXJzOiBmdW5jdGlvbiBsb2FkQW5zd2VycygpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICB2YXIgdXJsLCB0b2tlbiwgX3lpZWxkJGF4aW9zJGdldCwgZGF0YSwgcXVlc3Rpb25Mb2MsIHRvdGFsVm90ZXMsIGhhc2gsIGdldENvbG9yLCBfaGFzaCwgX2hhc2gyLCBjb29yZHM7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBnZXRDb2xvciA9IGZ1bmN0aW9uIF9nZXRDb2xvcih2YWx1ZSkgewogICAgICAgICAgICAgICAgICB2YXIgaHVlID0gKDEgLSB2YWx1ZSkgKiAyNDA7CiAgICAgICAgICAgICAgICAgIHJldHVybiAiaHNsKCIuY29uY2F0KGh1ZSwgIiwxMDAlLDUwJSkiKTsKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2xvYWRBbnN3ZXJzIGNhbGxlZCcpOwogICAgICAgICAgICAgICAgdXJsID0gIiIuY29uY2F0KF90aGlzMi4kQVBJdXJsLCAiL2dlb1F1ZXN0aW9uP2hrPSIpLmNvbmNhdChfdGhpczIuaGssICImcms9IikuY29uY2F0KF90aGlzMi5yayk7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLiRhdXRoLmdldFRva2VuU2lsZW50bHkoKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgdG9rZW4gPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdVUkw6ICcsIHVybCk7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDk7CiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KHVybCwgewogICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogIkJlYXJlciAiLmNvbmNhdCh0b2tlbikgLy8gc2VuZCB0aGUgYWNjZXNzIHRva2VuIHRocm91Z2ggdGhlICdBdXRob3JpemF0aW9uJyBoZWFkZXIKCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICBfeWllbGQkYXhpb3MkZ2V0ID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgICBkYXRhID0gX3lpZWxkJGF4aW9zJGdldC5kYXRhOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1Jlc3BvbnNlOiAnLCBkYXRhKTsKICAgICAgICAgICAgICAgIHF1ZXN0aW9uTG9jID0gSlNPTi5wYXJzZShkYXRhLmdlb0pzb24uUykuY29vcmRpbmF0ZXM7CiAgICAgICAgICAgICAgICBfdGhpczIuY3VycmVudExuZyA9IHF1ZXN0aW9uTG9jWzBdOwogICAgICAgICAgICAgICAgX3RoaXMyLmN1cnJlbnRMYXQgPSBxdWVzdGlvbkxvY1sxXTsgLy8gUmVtb3ZlIG5vbi1oYXNoIGF0dHJpYnMgZnJvbSByZXNwb25zZQoKICAgICAgICAgICAgICAgIGlnbm9yZS5tYXAoZnVuY3Rpb24gKGF0dHJpYikgewogICAgICAgICAgICAgICAgICByZXR1cm4gZGVsZXRlIGRhdGFbYXR0cmliXTsKICAgICAgICAgICAgICAgIH0pOyAvLyBHZXQgdG90YWxWb3RlcwoKICAgICAgICAgICAgICAgIHRvdGFsVm90ZXMgPSAwOwoKICAgICAgICAgICAgICAgIGZvciAoaGFzaCBpbiBkYXRhKSB7CiAgICAgICAgICAgICAgICAgIHRvdGFsVm90ZXMgKz0gcGFyc2VJbnQoZGF0YVtoYXNoXS5OKTsKICAgICAgICAgICAgICAgIH0gLy8gUmV0dXJucyBncmFkaWVudCBmb3IgdmFsdWUgb2YgMC0xCgoKICAgICAgICAgICAgICAgIC8vIFNldCBjb2xvcgogICAgICAgICAgICAgICAgZm9yIChfaGFzaCBpbiBkYXRhKSB7CiAgICAgICAgICAgICAgICAgIGRhdGFbX2hhc2hdLnBlcmNlbnQgPSBkYXRhW19oYXNoXS5OIC8gdG90YWxWb3RlczsgLy8gY29uc29sZS5sb2coZGF0YVtoYXNoXS5OLCB0b3RhbFZvdGVzKQoKICAgICAgICAgICAgICAgICAgZGF0YVtfaGFzaF0uY29sb3IgPSBnZXRDb2xvcihkYXRhW19oYXNoXS5wZXJjZW50KTsKICAgICAgICAgICAgICAgIH0gLy8gR2V0IGdlb2hhc2hlcwoKCiAgICAgICAgICAgICAgICBmb3IgKF9oYXNoMiBpbiBkYXRhKSB7CiAgICAgICAgICAgICAgICAgIGNvb3JkcyA9IGdlb2hhc2guZGVjb2RlX2Jib3goX2hhc2gyKTsgLy8gTWFwcyBib3VuZHMgbG9naWM6IGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL21hcHMvZG9jdW1lbnRhdGlvbi9qYXZhc2NyaXB0L3JlZmVyZW5jZS9jb29yZGluYXRlcyNMYXRMbmdCb3VuZHNMaXRlcmFsCgogICAgICAgICAgICAgICAgICBfdGhpczIuYmxvY2tzLnB1c2goewogICAgICAgICAgICAgICAgICAgIG5vcnRoOiBjb29yZHNbMF0sCiAgICAgICAgICAgICAgICAgICAgc291dGg6IGNvb3Jkc1syXSwKICAgICAgICAgICAgICAgICAgICBlYXN0OiBjb29yZHNbM10sCiAgICAgICAgICAgICAgICAgICAgd2VzdDogY29vcmRzWzFdLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiBkYXRhW19oYXNoMl0uY29sb3IsCiAgICAgICAgICAgICAgICAgICAgcGN0OiBkYXRhW19oYXNoMl0ucGVyY2VudCwKICAgICAgICAgICAgICAgICAgICBjZW50ZXI6IHsKICAgICAgICAgICAgICAgICAgICAgIGxhdDogKGNvb3Jkc1swXSArIGNvb3Jkc1syXSkgLyAyLAogICAgICAgICAgICAgICAgICAgICAgbG5nOiAoY29vcmRzWzFdICsgY29vcmRzWzNdKSAvIDIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSAvLyBjb25zb2xlLmxvZyhkYXRhKQoKCiAgICAgICAgICAgICAgICBfdGhpczIubG9hZGluZyA9IGZhbHNlOwoKICAgICAgICAgICAgICBjYXNlIDIxOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpKCk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["Answers.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n\n  <v-container class=\"pa-0 ma-0\">\n\n    <!-- Loading spinner -->\n    <v-container v-if=\"loading\" >\n      <div class=\"text-center\">\n        <v-progress-circular\n          :size=\"50\"\n          color=\"orange\"\n          indeterminate\n        ></v-progress-circular>        \n      </div>  \n    </v-container>\n\n    <!-- Questions list for authenticated users -->\n    <v-container class=\"pa-0 ma-0\" id=\"answersMap\" v-if=\"!loading\">\n\n      <GmapMap\n          :center=\"{lat:this.currentLat, lng:this.currentLng}\"\n          :zoom=\"7\"\n          map-type-id=\"roadmap\"\n          style=\"width: 100%; height: 80vh;\"\n          :options=\"{\n            zoomControl: true,\n            zoom: 11,\n            mapTypeControl: false,\n            scaleControl: false,\n            streetViewControl: false,\n            rotateControl: false,\n            fullscreenControl: false,\n            disableDefaultUI: false\n          }\"\n        > \n          <!-- <GmapRectangle \n            :key=\"index\"\n            v-for=\"(m, index) in blocks\"\n            :bounds=\"{north: m.north, south: m.south, east: m.east, west: m.west}\"\n            :options=\"{\n              fillColor: m.color,\n              fillOpacity: .6,\n              strokeColor: m.color,\n              strokeOpacity: .1,\n              strokeWeight: 1\n            }\"            \n          /> -->\n          <GmapCircle\n            :key=\"index\"\n            v-for=\"(m, index) in blocks\"\n            :center=\"{lat: m.center.lat, lng: m.center.lng}\"\n            :radius=\"(250+(1500*m.pct))\"\n            :options=\"{\n              fillColor: m.color,\n              fillOpacity: 0.8,\n              strokeColor: m.color,\n              strokeOpacity: 0.8,\n              strokeWeight: 2\n            }\"\n          />          \n          <GmapCircle\n            :center=\"{lat: currentLat, lng: currentLng}\"\n            :radius=\"8000\"\n            :options=\"{\n              fillColor:'blue',\n              fillOpacity:0.1,\n              strokeColor: '#0000FF',\n              strokeOpacity: 0.2,\n              strokeWeight: 5\n            }\"\n          />\n        </GmapMap>     \n\n    </v-container>\n\n    <!-- Back icon -->\n    <v-container class=\"pa-0 ma-0\">\n      <v-btn \n        v-if=\"$auth.isAuthenticated\" \n        fixed\n        dark\n        fab\n        bottom\n        right\n        color=\"gray\"\n        class=\"mb-4\"\n        to=\"/\">\n        <v-icon>arrow_back</v-icon>\n      </v-btn>\n    </v-container>    \n\n  </v-container>\n</template>\n\n<script>\n  import axios from \"axios\"\n  const geohash = require('ngeohash')\n  const ignore = ['answers','totalScore','geohash','question','geoJson','hashKey','created','rangeKey','type','state','author']\n\n  export default {\n    name: \"Answers\",\n    components: {\n    },\n    data: function () {   \n      return {\n        currentLat: 40.7358235,\n        parentHeight: 600,\n        currentLng: -73.9927102,\n        loading: true,        \n        hk: null,\n        rk: null,\n        blocks:[]\n      }\n    },\n    async mounted () {\n      console.log('mounted')\n      console.log(this.$route.query)\n      this.hk = this.$route.query.hk\n      this.rk = this.$route.query.rk\n      this.parentHeight = this.$parent.$el.offsetHeight;      \n      if (this.hk && this.rk) await this.loadAnswers()\n      \n    },\n    methods: {\n      async loadAnswers() {\n        console.log('loadAnswers called')\n\n        const url = `${this.$APIurl}/geoQuestion?hk=${this.hk}&rk=${this.rk}`\n        const token = await this.$auth.getTokenSilently();\n        console.log('URL: ', url)\n        const { data } = await axios.get(url, {\n          headers: {\n            Authorization: `Bearer ${token}`    // send the access token through the 'Authorization' header\n          }\n        })\n        console.log('Response: ', data)\n\n        const questionLoc = (JSON.parse(data.geoJson.S)).coordinates\n        this.currentLng = questionLoc[0]\n        this.currentLat = questionLoc[1]\n\n        // Remove non-hash attribs from response\n        ignore.map((attrib) => delete data[attrib])\n\n        // Get totalVotes\n        let totalVotes = 0\n        for (let hash in data) {\n          totalVotes += parseInt(data[hash].N)\n        }\n\n        // Returns gradient for value of 0-1\n        function getColor(value){\n          let hue=((1-value)*240)\n          return `hsl(${hue},100%,50%)`\n        }\n\n        // Set color\n        for (let hash in data) {\n          data[hash].percent = data[hash].N / totalVotes\n          // console.log(data[hash].N, totalVotes)\n          data[hash].color = getColor(data[hash].percent)\n        }\n\n        // Get geohashes\n        for (let hash in data) {\n          const coords = geohash.decode_bbox(hash)\n\n          // Maps bounds logic: https://developers.google.com/maps/documentation/javascript/reference/coordinates#LatLngBoundsLiteral\n          this.blocks.push({\n            north: coords[0],\n            south: coords [2],\n            east: coords[3],\n            west: coords[1],\n            color: data[hash].color,\n            pct: data[hash].percent,\n            center: {\n              lat: (coords[0]+coords[2])/2,\n              lng: (coords[1]+coords[3])/2\n            }\n          })\n        }\n          // console.log(data)\n\n        this.loading = false\n      }\n\n    }\n  }\n</script>\n"],"sourceRoot":"src/views"}]}